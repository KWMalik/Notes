Unit Testing with QUnit - Ben "Cowboy" Alman - 1/5/2011
REF: github.com/cowboy
REF: @cowboy

REF: http://docs.jquery.com/Qunit

Open (paraphrase): Wrote many jQuery plugins, looking for a way to share plugin development with other developers. In jQuery plugin library, there are thousands of plugins. How does one differentiate one's own plugins against others, and make them better for the community as a whole? In general, many of the better plugin pages have demos, documentation, beautiful presentation, etc. At some point, writing unit tests came up; to help test and reduce regression.

Usually where unit tests saves (my butt) is when I am modifying something in my code, and I add something that seems logical and simple; causes a specific circumstance to fail. It is a good feeling to know that your unit tests are useful, preventing time spent on regressions and side effects.

I'm going to mainly focus on implementing unit testing with qunit / qunit api. Some samples, and talk more about the implementation of qunit. I want to really point you at how easy it is to get into unit testing, to get you to be able to sit down (on first try) and start adding tests to your code.

*** Introduction

** An easy-to-use JavaScript Unit Testing framework

How easy?

test("some tests", function() {
expect(3);
ok(true, "passes because true is true");
equal("1", 1, "passes because '1' == 1");
strictEqual("1", 1, "fails because '1' !== 1");
});

In this example, we are expecting 3 assertions. ok(), equal(), strictEqual().

Q: Why is expect() necessary?
A: This is useful for asynchronous testing, in the case where something fails to run and you reach the end of scope. I will get into this more later.

** Used and Maintained by the jQuery Project

3823 tests, and counting

Factoid: Each test contains at least 1 assertion

** Does your code work?

* your code is more complex than you think

In any case, it is bad when you cause a regression; or your team does. Also beware of people commiting who try to avoid passing the unit test suite setup.

* different browsers behave differently

Much of the code you write in javascript is quite simple; but a lot of it may be browser dependent. It's helpful to have a suite of unit tests that you can refresh; and test in each browser (Chrome, Firefox, Opera, Internet Explorer, Safari) x (Mac, PC). Also, I test against the browsers that jQuery supports, some older versions (but of course, not as far back as FF 1.0).

* caffiene & intuition only carry you so far.

Sometimes you're not thinking straight, and unit tests allow you to think twice or more about your code. Once, when creating the test, and once more for you (automatically) whenever you update your code.

** Fixing Bugs

1. Write a test that asserts a bug's existence.

Write a test that exposes the conditions of the bug.
Write code to fix the bug.
Run unit tests, now you can be sure the bug is fixed and you haven't introduced a regression.

2. Squash the bug.
3. Pat self on back.

** Regression Testing

1. Change some code.
2. Ensure you didn't break anything.
3. Pat self on the back.

Case: A huge codebase, without unit testing. The organization that produced this suffered from code issues all the time.

** It's Cool

1. Devs know that you test your code.
2. They use your code with confidence.
3. Pat self on the back.

I've talked with some developers that refuse to use jQuery plugins that don't have unit tests. They fear consequences of being able to change something without causing issues.

*** Getting Started

A lot of people write their unit tests before they start coding. This is up to you; I don't like to do that, but this is nice- you can write your assertions up front, and into plain-language; before you write your code. I don't know if there is a right or wrong way; but it is nice to make sure that you are thinking straight about your code. (sic) If you are doing X, you should expect Y.

** Write testable code!

* Separate your code into small, individually testable parts.

When you start thinking more critically about your code, you stop writing large enormous functions and more modular, compact, organized, better structured code that is inherently more testable.

Caveat: One thing to consider, code written in a closure is very tough to test. You can unwind and write these public up front, but then you lose the privacy of a closure. One way around this is to expose them with _ names upfront, which imply (public convention) that these are sensitive internals.

One should consider rewriting event handlers into module functions. This avoids cases where you can only test things via functional tests.

** What's the next step?

* Download Qunit

REF: https://github.com/jquery/qunit

Three files:

qunit.js
qunit.css

and a little bit of html

<!DOCTYPE html>
<html>
<head>
<title>my app test suite</title>
<link rel="stylesheet" href="qunit.css" type="text/css" media="screen" />
<script src="qunit.js"></script>
<script src="myapp.js"></script>
<script src="myapp-tests.js"></script>
</head>
<body>
<h1 id="qunit-header">My App Test Suite</h1>
<h2 id="qunit-banner">banner/caption (changes when tests pass/fail, red/green)</h2>
<div id="qunit-testrunner-toolbar"></div>
<h2 id="qunit-userAgent"></h2>
<ol id="qunit-tests"></ol>
<div id="qunit-fixture"></div>
</body>

*** Create a Test

test("The name of the test", function() {
// Assertions go here
});

*** What are assertions?

Code that says "this is how it should work," and QUnit then tells you if it does (or doesn't).

*** First, set expectations

* This is most useful when testing async code, but get in the habit anyways

// Traditional
test("test name", function() {
expect(e);
// QUnit expects 3 assertions in this test.
});

// Shorthand
test("test name", 3, function() {
// QUnit expects 3 assertions in this test.
});

*** Qunit Assertions
ok, equal, notEqual, strictEqual, notStrictEqual, deepEqual, not deepEqual, and raises

*** ok

just an assertion is that something is true

test("ok", 3, function() {
  ok(true, "passes because true is true");
  ok(1, "passses because 1 is truthy");
  ok("", "fails because empty string is not truthy);
});

Q: So, what if undefined got here?
A: It would be false, and would fail.
Q: What message would it give?
A: It is up to your message. In the examples given here, I'm just showing pass/fail.

*** equal

a comparison assertion that passes if actual == expected

test("equal", 3, function() {
var actual = 1;

equal(actual, 1, "passes because 1 == 1");
equal(actual, true, "passes because 1 == true");
equal(actual, false, "fails because 1 != false");
});

this differs from ok, because you can get a diff, to see how values expected differed from actual

*** notEqual

test("notEqual", 3, function() {
var actual = 1;
notEqual(actual, 1, "fails because 1 == 1");
notEqual(actual, true, "fails because 1 == true");
notEqual(actual, false, "passes because 1 != false");
});

*** strictEqual

a comparison assertions that passes if actual === expected

test("strictEqual", 3, function() {
strictEqual(actual, 1, "passes because 1 === 1");
strictEqual(actual, true, "fails because 1 !== true");
strictEqual(actual, false, "fails because 1 !== false");
});

*** notStrictEqual

a comparison assertion that passes if actual !== expected

test("notStrictEqual", 3, function() {
notStrictEqual(actual, 1, "fails because 1 === 1");
notStrictEqual(actual, true, "passes because 1 !== true");
notStrictEqual(actual, false, "passes because 1 !== false");
});

*** deepEqual

recursive comparison assertion, working on primitives, arrays, and objects, using ===

test("deepEqual", 7, function() {
var actual = {a: 1};
equal(actual, {a:1}, "fails because objects are different");
deepEqual(actual, {a:1}, "passes because objects are equivalent);
deepEqual(actual, {a: "1"}, "fails because '1' !== "1");

var a = $('body > *'), b = $('body').children();

equal(a, b, "fails because jQuery objects are different");
deepEqual(a, b, "fails because jQuery objects are not equivalent");
equal(a.get(), b.get(), "fails because element arrays are different");
deepEqual(a.get(), b.get(), "passes because element arrays are equivalent");
});

This is especially useful in testing jQuery returns, as you can now deep-iterate through the result sets.

Q: what if you have nested objects?
A: It goes and iterates through each item and compares every item

Remember, this is something you'll love if you are testing things in DOM fashion.

*** notDeepEqual

recursive comparison assertion, The result of deepEqual, inverted.

There aren't too many use cases for this, but it exists if you need it.

*** raises

assertion to test if a callback throws an exception when run

test("raises", 3, function() {
raises(function() {
  throw new Error("look ma, i'm an error!");
  }, "passes because an error is thrown inside the callback");
raises(function(){
  x // ReferenceError: x is not defined
  }, "passes because an error is thrown inside the callback");
raises(function(){
  var a = 1;
  }, "fails because no error is thrown inside the callback");
});

If you're writing code that people need to evaluate and handle errors in a useful way, raises() is what you would use.

*** Tests should be atomic!

* and execution order cannot be guaranteed!

// DON'T DO THIS

var counter = 0;
test("first test", 1, function(){
counter++;
equal(counter, 1, "counter should be 1");
});
test("second test", 1, function(){
counter++;
equal(counter, 2, "counter should be 2");
});
test("third test", 2, function(){
counter++;
equal(counter, 2, "counter should be 2");
ok(false, "oops an error");
});

Caveat: Some test parts may be cached. So order can't be guaranteed... in chrome, these tests run forwards and backwards depending on each test attempt.

Q: Something I am curious about, are there ways to write tests where you can only run certain tests or modules?
A: Yes, via query strings.

*** #qunit-fixture

Any markup in here will be reset after every test (uses jQuery if possible).

<div id="qunit-fixture">
<ul>
<li>foo</li>
<li>bar</li>
<li>baz</li>
</ul>
</div>

You can setup any DOM tree that you need in there; allowing you to write more atomic tests, with the expectation that content is correct and fresh for every test.

*** A plugin "test suite"

* sometimes it really is this simple

test("enumerate()", 4, function() {
var items = $("#qunit-fixture li");

strictEqual(items.enumerate(), items, ".enumerate should return this");
equal(items.eq(0).text(), "0. foo", "first item should have index 0");
equal(items.eq(1).text(), "1. bar", "second item should have index 1");
equal(items.eq(2).text(), "2. baz", "third item should have index 2");
});

test("enumerate(1)", 4, function() {
var items = $("#qunit-fixture li");

strictEqual(items.enumerate(1), items, ".enumerate should return this");
equal(items.eq(0).text(), "1. foo", "first item should have index 1");
equal(items.eq(1).text(), "2. bar", "second item should have index 2");
equal(items.eq(2).text(), "3. baz", "third item should have index 3");
});

Q: Because this was checking for things in the fixture div and reverts it on every test, would this prevent you from using anything else on the page?
A: No. You're free to modify anything else on the page, but this will affect the ability of your tests to run as atomic assertions. But sometimes there are gray areas... say if you were modifying something based off the body element, then you might not be able to put it into a fixture. Perhaps for the body element, you could just put it in an iframe and cross-script a solution to inspect it.

*** Plugin Authors

* if possible, test your plugin in multiple versions of jQuery

Note: qunit works with all versions of jQuery and does not require jQuery.

*** more powerful modules

configure setup and teardown callbacks to streamline your tests

module("module2", {
setup: function () {
ok(true, "once extra assert per test");
this.prop="foo";
},
teardown: function() {
ok(true, "and one extra assert after each test");
}
});

test("test with setup and teardown", function() {
expect(3);
same(this.prop, "foo", "this.prop === 'foo' in all tests");
});

Q: How do the tests know they're in the module?
A: By order. In QUNIT, you define a module, then the tests after. Modules declare in order with tests. The tests might not run in order, but sets of modules execute in groups. For multiple modules, just declare them after a previous module is done.

Q: Can you tell it how many tests are expected in setup/teardown?
A: Not at this time, but feel free to suggest this if you need this. Otherwise, you would have to adjust the counts expected for each test.

Q: Is there a need for multiple asserts in setup/teardown?
A: In cases, maybe.
Audience A: Also, complicated setups also might need testing. So you might want to add a test to be sure your setup is correct.

*** Sweet,  no errors!

* but as you can see, sometimes no errors is a bad thing

test("no errors", function() {
var actual = false;
setTimeout(function() {
ok(actual, "this test would fail, if it ever ran");
}, 1000);
});

Tests run synchronously, so this can't ever run.

*** Set expectations, stop and start!

test("expectations", function() {
expect(1);
var actual = false;
stop(); // Stops test execution until further tests are run.
setTimeout(function() {
ok(actual, "this test would fail, if it ever ran");
start();
}, 1000);

});

*** asyncTest
s action to complete.
another way to tell QUnit to wait for an asynchronou

asyncTest("test", 1, function() {

});

*** using a timeout

get more granular control over your asynchronous tests

test("stop w/timeout", function() {
expect(1);

stop(1000);

$.getJSON("http://oops.com?callback=?", function(data) {
ok(actual, "this test would fail.. if it ever ran");
start();
});
});

*** multiple async functions in one test

REF: jsfiddle.net can be used to echo back what is sent

test("multiple async w/counter", function(){
stop();

// only call start() when counter is 0.
var counter = 2;
function done() {--counter || start();}

var url = "http://jsfiddle.net/echo/jsonp/?callback=?";

*** the best way

jorn added this one in, because I asked nicely

test("multiple async w/multiple stops", function() {
expect(4);

stop();
$.getJSON("http://oops.com?callback=?", function(data) {
ok(false, "this test would fail.. if it ever ran");
ok(false, "this test would fail.. if it ever ran");
start();
});

stop();
$.getJSON("http://oops.com?callback=?", function(data) {
ok(false, "this test would fail.. if it ever ran");
ok(false, "this test would fail.. if it ever ran");
start();
});
});

*** simulate ajax?

what are you testing anyways, your client code or your server code?

*** mockjax

mock your ajax requests with mockjax for rapid development

$.mockjax({
url: '/user',
contentType: 'type/json",
resposeText: {status: -1}
});

$.mockjax({
url: '/user/*',
contentType: 'type/json",
resposeText: {status: 1, user: 'sample user'}
});

REF: Also the jupiter mvc javascript guys have a similar mock harness.

*** URL parameters

running specific tests

All tests 
modules.html

"core" module
modules.html?core

"options" module
modules.html?options

"Assertions" test suite

assertions.html

assertions.html?ok

assertions.html?ok+equal

*** global pollution detection

just add ?noglobals to the URL, and QUnit will fail any "leaky" tests

test("not leaky", 1, function() {
var x = true;
ok(x, "passes because x is true");
});

test("leaky", 1, function(){
x = true;
ok(x, "also passes because x is true");
});

*** callbacks

automatically capture qunit test results, a la TestSwarm

QUnit.begin = function() {
console.log("running test suite");
};

QUnit.done = function() {
console.info("blah blah blah all tests completed");
};

.log // every assertion
.testStart // on test start
.testDone // on test stop
.moduleStart // on module start
.moduleDone // on module done
.reset // after every test group, redefining this will override the built-in #qunit-fixture reset logic

REF: Mozilla Labs TestSwarm (distributed continuous integration for javascript)

*** Qunit recap

* write testable code
* tests should be atomic
* organic tests into modules
* simulate your AJAX
* it's only three files!

REF: https://github.com/cowboy/talks/tree/master/unit-testing-qunit

Q: Is there a plan or strategy for deprecated functions (equals / equal) in QUnit going into the future?
A: Contact jorn if this is an issue. Some things were changed because of common convention, to maintain parallels with other test frameworks.

Q: I'm wondering if there's a way to have a module run if another module succeeds? I'd like to shorten the time if there is an early failure.
A: I haven't seen anything like that. That's interesting. At now, it isn't too bad if something runs, fails; then the next module just fails. This could be a valid thing to support.

Q: Is there a recommended way to test an entire application in this manner?
A: This varies, you may wish to just load separate parts, content, pieces of your application into a harness. If you wanted to do something more complicated, you might want to use FuncUnit (sp??) that includes QUnit and that will allow you to do higher order functional testing to simulate what a user would do.
In terms of an entire website; you could use selenium; that would be able to interact straight with your app. That's something you can do on a much larger scale for an application level thing.
Audience A: If you have a node.js instance, you can also use zombie.js to access the DOM on the server side.
