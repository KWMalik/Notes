Closure Tools: Principles and Practice - Michael Bolin - 1/6/2010

*** why closure?

challenges with javascript development "in the large":

* no namespaces, resulting in name collisions and lack of module boundaries
* no visibility controls: every variable is public
* no type system
* no static checking because js is interpreted
* no built-in support for templates even though js is frequently used to build up large strings of HTML
    (not even support for multi-line strings)

*** what is closure?

closure refers to a suite of javascript tools that have been open-sourced by google

* closure library
* closure templates
* closure compiler
  inling, removes dead code, folding constants, minifying, error/syntax checking
* closure testing framework
  jsunit based
* closure inspector
  firebug ext. to help debug obfuscated code
* closure linter
  code lint / code style checker / code format
  
the suite of losure tools was open-sourced as part of google's "make the web faster" effort

*** who uses closure?

many google apps are built on closure rather than the google web toolkit (GWT)

gmail, maps, docs, sites, books, reader, blogger, calendar, photos

though closure was open-sourced in nov. 2009, other companies have started using it as well

yext, cloudkick, chartbeat

*** how can closure help me?

it depends:

if you plan to create a single-page application that dynamically updates content with javascript, then you can benefit from the *library*, *templates*, and the *compiler*

/this is a good if you care about speed and offline support/

if you plan to serve many public pages with HTML generated on the server with a dab of JS for ornamentation, then you are probably only interested in the *compiler*

/this is good architecture if you care about being indexed by a web crawler/

*** how closure addresses the development issues

* closure library interoduces javascript functions goog.provide() and goog.require() to declare/manage namespaces
  some people use requireJS for this
* closure library employs jsdoc annotations to indicate visibility and type information
* closure compile performs static checks that enforce visibility and type annotations, among other things
* closure templates make it possible to write HTML with placeholders that become functions that can be called from JS
  (also includes xss support?)


*** closure design principals

* strong emphasis on reducing the size of compiled code
* identify as many js errors at compile time as possible
* js should work in both compiled and uncompiled modes
  NOTE: unlike coffeescript
* js should work on all "modern browsers", including IE6
* js should manage references to avoid memory leaks
  more sensitive to DOM structure
* js should not modify built-in types (such as Array.prototype, Object.prototype)
* js should work across frames
* closure tools should be independent, so it should be possible to adopt the use of one without the others; however the whole is greater than the sum of the parts

*** a look at closure library code

goog.provide('goog.string);

/**
  * fast prefix-checker.
  * @param {string} str The string to check.
  * @param {string} prefix A string to look for from the start of {@code str}
  * @return {boolean} True if {@code str} begins with {@code prefix}
  */

goog.string.startsWith = function(str, prefix) { 
  return str.lastIndexOf(prefix, 0) == 0;
};

Q: is this a standard format for jsdoc? can we use jsdoc to markup documentation for methods?
A: the @param/@code are, don't know about the overall format

*** closure templates code

{namespace example.hello}

{template .helloName}
  {if not $greetingWord}
    Hello <b>{$name}</b>!
  {else}
    <ul>{$greetingWord} {$name}!</u>
  {/if}
{/template}

compiles to

goog.provide('example.hello');

example.hello.helloName = function(opt_data, opt_sb){
  var output = opt_sb || new soy.StringBuilder();
  output.append((!opt_data.greetingWord) ?
    'Hello <b>' +
    soy.$$escapeHtml(opt_data.name)+'</b>!':'<u>' +
    soy.$$escapeHtml(opt_data.greetingWord) + ' ' +
    soy.$$escapeHtml(opt_data.name) + '</u>');
  if(!opt_sb) return output.toString();
};

Q: Can you use this to generate JSON/XML?
A: Yes. However, if your line ends with a } or >, all whitespace might be removed.
Q: What about [ ] ?
A: Those are just treated normally, not inclusive of } or >. But there is a literal that also prevents the collapse of whitespace.
Q: How small does the output get squeezed by the compiler?
A: Not too much; but it will shorten names and items.
Q: So how is this an improvement over php_include() ?
A: This is client-side, and can be called as needed from js functions.
Q: You mention each tool is independent. What would you need to do to wire this to work with jQuery.
A: There's a script to be run that would create a script you can use; which you can then add as a dependency.

*** calling a closure template

goog.require('example.hello);
goog.require('goog.dom');
var data = {greetingWord: 'Hola', name: 'Sr. User'};
goog.dom.getElement('some-el').innerHTML = example.hello.helloName(data);

*** verbosity belies compiled code size

original code:

goog.provide('goog.string');

goog.string.startsWith = function(str, prefix) {
};

** compiled code:

var x=function(a, b){return a.lastIndexOf(b,0)==0;}

*** externs

how did the compiler know to treat lastIndexOf as special?

Answer: externs (idea specific to the compiler, not js)

externs are lists of symbols provided by the environment in which js will be run

window document alert() setTimeout() etc

*** common utilities in the closure library

* goog.sting 
  string/array utilities
* goog.object 
  object literal utilities
  json serialization
* goog.net.cookies
  getting/setting cookies
* goog.dom
  manipulating the DOM
* goog.dom.classes
  managing CSS
* goog.userAgent
  user agent testing
* goog.style
  manipulating CSS styles
* goog.structs
  class/structure support

*** defining a class in closure

gog.provide('yext.User');

/***
 * @param {string} email User's email address.
 * @constructor
 */
yext.User = function(email) {
  /** @private */
  this.email_ = email;
}

/** @return {boolean} */
yext.User.prototype.isOnAol = function() {
  return goog.string.endsWith(this.email_, '@aol.com');
};

*** static fields and methods in closure

static values are defined in the constructor function rather than its prototype

yext.User.emailMap = {};

yext.User.getUserForEmail = function(email) {
return yext.User.emailMap[email];
};

*** inheritance in closure

goog.provide('yext.SuperUser');
goog.provide('yext.User');

/**
 * @param {string} email User's email address
 * @constructor
 * @extends {yext.User}
 */
yext.SuperUser = function(email){
yext.User.call(this, email);
};

goog.inherits(yext.SuperUser, yext.User);

*** overriding a method

/** {@inheiritDoc} */
yext.SuperUser.prototype.isOnAol = function() {
var isOnAol = yext.SuperUser.
superClass_.isOnAol.call(this);
return isOnAol &&someOtherCheck();
};

** why this works

goog.inherits = function(childCtor, parentCtor) {
/** @constructor */
function tempCtor() {};
tempCtor.prototype = parentCtor.prototype;
childCtor.superClass_ = parentCtor.prototype;
childCtor.prototype = new tempCtor();
childCtor.prototype.constructor = childCtor;
};

Q: Are all of these in the same file?
A: Not necessarily. Most times they're in separate files.
Q: How does goog.provide() know where the source lives?
A: So provide(), doesn't know about other files(). require(), that.. we'll come back that.

*** event management

it is possible to register listeners for built-in browser events (like clicks/keypresses) and user-defined events through the same interface in the Closure library:

/**
  * this is a simplified version of the api
  * @param {EventTarget|goog.events.EventTarget} src Source of the event
  * @param {string} type Event type to listen for
  * @param {function(goog.events.Event)} listener
  * @param {boolean=} capture
  * @param {object=} handler
  * @return {number} unique key for the listener
  */
goog.events.listen = function(src, type, listener, capture, handler) { /* ... */ };

*** mouse listener

adding a click listener

var key;
var el = goog.dom.getElement('some-button');
var callback = function(e) {
if(e.type != goog.events.EventType.CLICK || e.target != el) {
alert('received unexpected arguments');
}
goog.events.unlistenByKey(key);
};
key = goog.events.listen(el, goog.events.EventType.CLICK, callback);

// See also: goog.events.listenOnce()
// See also: goog.events.EventHandler

*** example: custom event

goog.provide('yext.LoginEvent');
goog.require('goog.events.Event');

yext.LoginEvent = function(user) {
goog.events.Event.call(this, yext.LoginEvent.Type

}

*** custom eventtarget

this.dispatchEvent() ...

*** listen for a custom event

goog.events.listen(...);?

Q: if the compiler can determine only one thing can call it, will it inline it? (or tidy it out?)
A: I don't think it can do that right now. There are other cases where it knows if it receives something of a given type (direct calls).

Q: Does the library cleanup eventhandlers at the end for you?
A: you can use events.listenOnce() / EventHandler. EventHandler has a dispose() that can remove all the keys for you.

Q: in the case of IE memory leaks can you automatically do disposal?
A: no, that would still be possible if you don't clean up.

*** user interface components

the closure library includes a diverse set of UI widgets in the goog.ui package. they are skinnable and dispatch events in a consistent manner with the rest of the library.

like the rest of the code in the library, they are battle-tested in real google apps products across browsers, so leveraging them can save a lot of time and energy.

at the same time, it takes a bit of effort to understand the model behind the goog.ui package in order to use the widgets effective. the chapter that explains this in /the definitive guide/ is 50 pages long, so it is hard to condense into one slide.

Q: Are there apps/controls that use this that don't look like google apps?
A: Yes. I know the defaults look google-like; but there is separation in CSS so you can skin/style the way you want.

Q: What's the load / price for using these? have you ever run into a situation where you've got too much on one page and things start to drag?
A: Most of these are pretty snappy. In our own javascript, that's 100kloc of code. We carve up parts into modules, as 40kloc is google closure, and 60kloc is ours. We delay-load (sic) to avoid trying to load 4mb of code at once.
Q: Is this modularization supported automatically?
A: yes, by closure compiler.

*** closure compiler

here is an example of a widget built using the closure libary being compiled to 4% of its original size using the closure compiler

http://bolinfest.com/javascript/closure-compiler-vs-yui.html

*** closure compiler: renaming

the compiler flattens properties by replacing dots with dollar signs (up to the prototype keyword):

before: goog.string.startsWith
after: goog$string$startsWith

before: yext.User.prototype.isOnAol

after:
var yext$User$prototype = yext.User.prototype;
yext$User$prototype.isOnAol

*** closure compiler: devirtualizing prototype methods

although it sounds fancy, it is actually a simple xformation on instance methods and their call sites. it is done provided that the method is not overridden, and the function does not reference the arguments variable

*** closure compiler: inlining

the closure compiler inlines the following things

* constants
* variables used just once (out of a loop)
* getter methods
* functions called just once (not referencing this)

i'm tring to save bytes is not an excuse to use a short variable name or to avoid refactoring large functions: the compiler will rename your variables and inline the pieces of your decomposed function for you.

*** quoting properties is significant

unquoted properties can be renamed by the compiler

var properties = {email: 'mbolin'};
// will be compiled into:
// var a={b:'mbolin'};

quoted properties cannot be renamed because the compiler does not modify string literals

var properties = {'email': 'mbolin')[
// compiled into
// var a={'email':'mbolin'};
the rule of thumb is to use quoted values to extract values

*** do not use this inside a static function

*** avoid eval() and with

generally eval() and with break down in the presence of variable renaming, so they should not be used in javascript that is going to be compiled

fortunately this is not a significant hindrance because with is already disallowed in the most recent version of js with strict mode.

there are legitimate cases of using eval() such as parsing a string of JSON, though that will still behave correctly in compiled mode.

Q: can i pull in unrelated scripts into a namespace commands
A: yes. in fact, with jQuery, we pull the entire library in.

*** closure build commands

a developer has to run the following commands to use the library, templates, and compiler together

java -jar SoyToJsSrcCompiler.jar ........

*** instead, introducing plovr

plovr is an open-source build tool for Closure

http://plovr.com/

*** plovr features

in order to lower the barrier to entry for closure, plovr has the following features

* single download (java jar) that bundles library, templates, and compiler together
* build options are stored in a JSON config file
* operates in both build and server modes
* dependency information is parsed once from JS files (reparsed if the file changes)
* running in server mode eliminates startup time for recompilation

*** consider a small jQuery program

$('#toggle').click(function() {
var shade = $('.shade');
if(shade.is(':hidden')){
shade.slideDown();
}else{
shade.slideUp();
}
});

*** plovr config file

{
"id": "jquery-demo",
"inputs": "jquery-demo/demo.js",
"externs": "jquery-1.4.4.externs.js",
"mode": "ADVANCED",
"level": "VERBOSE",
"checks": { "missingProperties": "WARNING"}
}

Q: how long does it take to compile 100kloc of javascript in your work environment?
A: about 50seconds

*** rnning plovr

the following command starts plovr in server mode:

// java -jar plovr.jar serve config.js

the following command outputs to stdout, which may be piped out to a file:

// java -jar plovr.jar build config.js

*** questions? (references)

closure project home page: http://code.google.com/closure
twitter: @closuretools

contact info:
blog: http://blog.bolinfest.com/
twitter: @bolinfest
email: bolinfest@gmail.com

Q: how do you locate the original location of code if an inlined output function is misbehaving?
A: if you use the firebug extension, you can locate the original source.

Q: do you closure with everything at yext? or do you also use jquery/other libraries.
A: depends on the project. we use a lot of closure, but some other tools. all our server code is in java.

Q: what do you use to edit all of this?
A: i use eclipse to edit; and in code I use the plovr links to get back.

Q: is there eclipse support for closure?
A: not really. there are some plugin devs who are making things that can use type information, though.

Q: do you have any idea where closure is going? are there any new neat features coming up?
A: it's mostly developed internally at google for their stuff. but they're slowly getting better at release cycle and in taking patches by the public. in practice; a lot of the influence is from the needs of apps at google. most of it is supported by 20% teams at google. in the future they may make a dedicated team; but for now just the 20%ers.

Q: i just started using plovr, which i like. can you explain a little about the testing framework? i have to create separate configs for each test suite.
A: at this time, no support for those scenarios.

Q: how close are these UI components to the new google docs components?
A: it's quite different. but they are very close to the gmail controls and components.