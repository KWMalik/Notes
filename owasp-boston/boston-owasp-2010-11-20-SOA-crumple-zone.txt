Andrew Gronosky, Michael Atighetchi - Raytheon BBN Technologies
agronosk@bbn.com
matighet@bbn.com
Charles Payne - Adventium Labs LLC

*** A crumple zone for Service-Oriented Architectures

*** Outline
* Introduction & Background
* Design of the Crumple Zone
* Performance Considerations
* Next Steps
* Summary

** The Crumple Zone Concept
* A layer of server-side proxies that 
 - protects a service by absorbing and containing damage
 - goes beyond packet inspection to partially process untrusted data in a sandbox
 - automatically recovers from damage and adapts to attacks

** The need for a crumple zone
* policy-based firewalls are great: if you have the right policies
  - zero-day exploits are a fact of life
  - as systems become more inter-connected, policy management becomes more complex
* we recognize that attackers have the initiative: the logical response is to expect some attacks to succeed
  - try to constrain the scope of the attack

** the context of crumple zone research
* we have a number of current and recent gov funded research projects inIT security
  - focused on tolerating, surviving attacks
  - strategic concepts include containment and adaptive behavior
* the advanced protected services (APS) project is sponsored by the U.S. Airforce Research Labratory
  - objective: develop concepts and design techniques for survivable SOAs for DoD systems
  - for APS, developed prototype crumple zone for EJB over RMI
  - End product is a prototype that will undergo "red team" ie. Penetration-Testing in a lab.

Crumple Zone vis-a-vis web application firewalls

Concept of Operations:
WAF: Boundary protection in DMZ
Crumple Zone: Second and deeper line of defense for individual services

How it works
WAF: Inspection
Crumple Zone: Inspection and Partial Processing in a sandbox

Deployment Platform
WAF: Dedicated or commodity hardware, distributed if needed
Crumple Zone: Commodity Hardware; enterprise/airborne networks; can be distributed

Protocols
WAF: Mainly HTTP/HTTPs
Crumple Zone: Various our prototype is for EJB over RMI

Maturity
WAF: Commercially Available
Crumple Zone: Early Prototype

*** Perserving Data Integrity

* challenge: traffic must be protected to provide assurance guarantees (confidentiality, integrity, authentication) but must also be subject to full inspection
* Service Layer Virtual Private Groups (sIVPGs) unlock protected traffic for inspection while preserving the protection's guarantees
  - split protected stream into two copies
  - capture and share encryption keys
  - unlock and inspect only one copy; keep the other in escrow

** sIVPG benefits
* remains transparent to the client
  - enables inspection of data from clients we don't control
* can support any connection-oriented protocol
  - used in RMI proto
  - have designed with real use in RMI frameworks
  
Splits:

Client -> Firewall -> Splitter -> A. Mechanism Proxy with Neighborhoods -> Termination Proxy -> Service
Client -> Firewall -> Splitter -> B. Straight to Termination Proxy -> Service

At the escrow point in the Termination Proxy; traffic resumes after processing of data.

** Termination Proxy
* it's main role is to hold data in escrow until it passes security checks (performed elsewhere)
* exposes a service endpoint to which clients connect
* terminates the client's SSL connection and is responsible for key negotiation and sharing
* a watchdog automatically restarts proxy if there is a failure

** Firewall Component
* the firewall is used to actively control data flow as well as to filter packets
  - protects the termination proxy
  - splitter relies on firewall rules to split data
* we use IP tables firewall

** firewall: single packet authorization
* the crumple zone itself is an obvious target for an attacker
* SPA firewall starts with a deny-all policy to minimize attack surface
  1. client sends a special crypto packet requesting a port be opened
  2. daemon adds a firewall rule allowing limited-time connection from client's IP address
  3. Client connects through firewall to termination proxy
* we use an open-source implementation called KnockKnock
  - http://www.thoughtcrime.org/software/knockknock
* protects against port-scanning

** firewall: splitting SSL traffic
1. a client connects to the termination proxy; the splitter is listening to (but not decrypting) the client's stream
2. termination proxy signals the splitter to allow forwarding
3. the splitter loads iptables rules per connection to direct traffic to a designated netfilter queue (NFQ)
4. the NFQ captures and copies the stream as original packets (no decryption yet)

** mechanism proxy collection
* the split ssl data stream goes to a distributed collection of mechanism proxies
  - MPs send authorization signal to termination proxy
  - Termination proxy releases data from escrow only if it is authorized within a timeout period

** security checks: mechanism proxies
  - each mechanism proxy is designed to be small and simple
  - proxies are expected to occasionally die
  - we have implemented the following in our prototype:
~ via inspection
  RMI object size check
  RMI invocation rate check
  Java class whitelist
~ via emulation
  Java deserialization "canary" proxy
  
** an emulation-based proxy: the "canary"
* There are JEE vulnerabilities based on (lack of) type safety in Java deserialization (REF: Schoenefeld 2006)
* "Canary in a coal mine" deserializes RMI objects into a safe(r) JVM to protect against attacks for which we have no /a priori/ signature
  - JVM may have extended monitoring, restricted class composition, restricted class instantiation

Q: What is the cost of adding all these layers? Do you have performance data?
A: This is somewhat a burden on machine-level time; not so much on user time.

Q: Does some level of hardware use improve latency?
A: We think so. If we tried, we could.

** Proxy Groups
* Mechanism proxies collaborate in groups
* Proxies can execute sequentially or in parallel
* Each SSL connection is checked by its own associated proxy group
* assigned an instance to each incoming connection

** proxy neighborhoods
* proxy groups are grouped into neighborhoods
* each neighborhood:
  - shares SSL keys with Temrination Proxy
  - contains proxy groups for multiple client connections
  - is a separate process from other neighborhoods

** Neighborhoods provide fault isolation
* a primary goal of the crumple zone is to isolate attacks so they don't afect the whole system
* partially achieved by partitioning traffic among different MP neighborhoods
* currently round-robin assignment; but could also be partitioned by risk indicators per pool
* each neighborhood gets a watchdog to observe-restart as needed

** ensuring correspondence of data
* the bytes authorized by each MP must corespond to the bytes released by the Termination Proxy
  - necessary to resist replay attacks
* challenge: message boundaries != packet boundaries
  - if part of a packet is approved and part is not, how do we avoid sending unapproved bytes?
* our approach is to treat the incoming cipher text as a stream: first-in, first-out
  - both the termination proxy and the mechanism proxy neighborhood process the same bytes in the same sequence
  - implication: mechanism proxy checks are synchronous
  - this greatly simplifies the escrow mechanism
* we considered using a hash for correspondence; but this doesn't necessarily protect you from attacks
  - doesn't mean anything if a correspondence check fails by hash
  - packet loss would cause unauthorized data anyways (NOTE: is this for sure? what about TCP reliability?)

** performance considerations
* the proxy layers do introduce overhead: is the cost justified?
* latency is affected by the following factors
  - every MP must process every byte of data, though this can be done distributed and in parallel
  - setup time required for each connection
* thoroughput is affected by flow control exercised by the termination proxy
  - by reading/escrowing client data, TP controls data flow from client
  - buffer size should exceed bandwidth-delay production

Preliminary Latency Measurements
JB.1 - Median 83ms
Crumple-Zone Enhanced JB - Median 152ms

This crumple zone contains 4 MPs
  - Java class whitelist
  - RMI rate check
  - RMI size check
  - Canary Proxy

** next steps for crumple zone R&D
* support for additional protocols to further exercise the design concepts (WS is under development)
* replication / fault tolerance: eliminate TP as single point of failure (requires voting)
* More dynamic adaptation within proxy groups
* Outbound protection; current prototype is exclusively oriented towards inbound protection
* could be useful to add additional filters, MPs as attack granularity changes

** Summary
* the crumple zone is a flexible design that can support various RPC mechanisms and threats
  - we have implemented a working proto for RMI based EJBs
* emulation is a key strategy for dealing with zero-day exploits
* containment and recovery to mitigate DOS attacks
* there are interesting directions for further development

Q: Are there ways to subvert this design by intentionally causing MPs to fail via bad data?
A: That would really be a criticism of the MPs that we have implemented. I know that the ... the MPs are mainly in laboratory use at the moment. The WS one I mentioned, is just looking at POST, GET; could have false positive if various strings appear in the body of a message. The Canary Proxy has a low false positive rate?

Q: If I put a load on these, won't these be prohibitively expensive? Each item gets a process.
A: Proxy Groups at this time are loaded at startup, but we can also work on how we bring them online during startup of the service.

Q: How would you construct and deploy this solution?
A: We designed this to run on commodity hardware, and to be distributed within. You need to trust what is in the crumple zone, and need network protections to establish trust in the crumple zone.

Q: Where would you deploy this at the physical layer?
A: This could be placed on the control aircraft; but mainly this is intended to be at the control station on ground. One has to figure out what trust boundaries there are; even if you were doing joint operations, you might not trust all communication with the other parties.

Q: Would you consider a full-crumple zone on a VM?
A: We would probably run neighborhoods on a VM. I think that distributing these across multiple physical hosts is important.

Q: Have you considered spawning additional termination proxies by load?
A: I've thought about it myself; my teammates are unsure about this. This is a bootstrap problem; and they have to be there first before a client can connect first. There is a lot of orchestration. You can pool them, and if one goes down; swap one in; but it gets tricky. Note that the splitter doesn't have an IP address; it is part of the firewall.

Q: Have you considered adding logging and other non-security activities in these layers?
A: I like this already; there are already products that do this for compliance testing. But we haven't determined a direction for this sort of design. You can certainly add layers to the service-level handler group to do this work.

Q: Do you ever see this rolling into commercial services? Such as transmission of health records?
A: The dept of homeland security is very interested in these concepts. This idea could be another tool in our toolbox to be used in conjunction with that. It would be great if vendors who provide OTS products, could develop this idea and add it to their offerings. Do I see this happening? I don't see my company entering the arena, but we are definitely interested in promoting and discussing the idea with the public. We like an open design and discussion.

Q: How many MPs can be generated within a group? Dozens? Hundreds?
A: I envision small numbers. Certainly not more than dozens. In our prototype, we have 4; this is not enough for production use. Perhaps, my gut says, a dozen or so. The real question is how many do you wish to have?
Qp2: We need a means to measure this if we are to select a product for implementation. Suppose we had the country of india signing up- we have to service thousands of potential clients. Wouldn't this create an issue of roving targets?
A: We're trying to capture a large number of attacks with as few checks as possible. Getting away from knowledge based defense to anticipation and manner of handling things on a zero-day basis.