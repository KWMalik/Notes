Zach Lanier - Mobile Application Security - Intrepidous

** Broad Observations

* the web pushed content to the browser
  - centralization of apps & data
  - always a push for MORE (ActiveX, applets, flash)
* Now, everyone gets their own app!
  - Code (not HTML) gets pushed to the endpoint
  - XKCD Viewer
* AuthC / AuthZ
  - Carrier Applications
    "We trust you because you're on our network"
  - Third-Party Applications
    Sometimes better than carrier apps
    Incomplete support of open standards
  - Client-side data trust issues
    admin=1 type bugs (hardcoded privilege)
* HyperGlobalMegaCloudDataMeshStore
  - Many apps for syncing data between device and CLOUD
  - Full AuthC, AuthZ bugs

Often has holes whereby they make assumptions that can be false- impersonation of another person's phone number or carrier network. Applications may blindly trust the data received under these assumptions.

** Platform Security

* Many disparate platforms
  - Android, RIM, iPhoneOS, WinMo, Brew, Symbian, WebOS
* Controls
  - Network Hardening
  - Application Sandboxing
  - Managed Code
  - Code Signing
* Concerns
  - Shared User Accounts
  - Native Code (Obj-C, JNI)
  - Certificate Validation
      SSL, Code Signing
  - Support for Emerging Technologies
      Flash, WebKit, HTML5

Watch out for instances of WebKit where they use a self-created build/implementation; not an official build issued by Google / Apple.

** Testing Techniques
* Whitebox Source Code Review
  - Sometimes, it's trivial to get app source code
* Black Box
  - Acquiring Application Binaries
  - Reverse Engineering
      Disassembly / Decompilation
  - Network Analysis
      Protocol Analysis, fuzzing
      MITM

Q: How do you MITM on a phone?
A: Stay tuned.

* undx, dex2jar, coddec, JAD
  - decompilation tools
* smali / baksmali
  - assembler / disassembler, patching
* native code
  - IDA with ARM support
  - Strings

Q: For decompilation, do you find customers obfuscating their code?
A: No, not typically, but there are some automated tools for doing this. So, for example, on android; you will sometimes get multiple outputs from undx that require further disassembly due to obfuscation with AES.

For MITM, we can look for SSL signatures / endpoints where SSL libraries are called, and recompile the output to talk to our own servers.

dalvik VM is register-based, whereas the reference Java VM is stack-based.

* Not everyone can be a Binary RE ninja
  - and project timelines don't allow for on-the-job training
* Sometimes the easiest way to understand an application is to look at its TRAFFIC
* Become the MITM
  - Just like WAPT, Burp, WebScarab, Mallory (On BitBucket, GUI-like version of netsed functions), netsed (sed for network traffic)
  
* MAPT MITM Challenges!
  - Run the app in an emulator (boring)
  - Connect the phone to your own WAP
      Upling your WAP to your laptop with internet sharing enabled
      Then turn on wireshark
  - WiFi not always an option
      Handset might not support WiFi
      Application might require carrier network
        Modify the Application, changing server.carrier.com to testsite.com
  - Wireshark lets you see traffic
    SYN TCP 80
    SYN TCP 443
    SYN TCP 9999 ????
    UDP DST Port 4717?

*** Case Studies

** Case Study: Foursquared
* Foursquare client for android
* originally written in java, like most android apps
  - source code released under apache 2.0 license
* foursquare API supports Basic Auth and OAuth
  - OAuth includes signatures for transactions, helps prevent replay attacks, etc.
  - guess which one foursquared uses?
* Correct: HTTP Basic Auth over plaintext transport
* There's a SWE for that!
  - CWE-331: Missing Encryption of Sensitive Data
      (including credentials)
* Why is this a problem?
  - Everyone uses Foursquare
      Well, maybe not you, but everyone else!
  - Most applications "prefer" WiFi to cell radio
      trivial interception of creds
* Funny Enough, Foursquared has OAuth Support
  - But not really used.

** Case Study: Storage Application
* Multi-platform application for storing and retrieving music, videos, documents, and more.
  - Android, BREW, web, iPhone clients
* Simple crash in storage quota viewer
  - Divide by zero error leads to DoS
  - Attacker must successfully intercept and modify server response for this to happen
      a bit more difficult because this communicates only over carrier network

* Diddling with "digital rights management"
  - Application Supports sharing of video, audio, image content with your contacts
  - Enforces "DRM" on "protected" files
      often copyrighted or premium content
  - Enforcement occurs based on the value of an attribute in the file's XML manifest
      Yes, Virginia, that IS under the user's control
  - Hacked via Burp, reverse proxy, to rewrite this value

Q: Where was this XML file?
A: It was in a response from the server- so before it is received at the client, we can rewrite it. So in a sense, this is twofold- the client is not validating whether the server is giving a correct response too.

* The DRM basically enforced within the client, predicated on the response from the server
  - CWE-807 Reliance on Untrusted inputs in a client

** Case Study: Widget Framework
* Cross-platform framework for HTML/JS widgets
  - WinMo, Android, etc.
* Custom permissions restricted us from sending messages (intents) to the widget runtime
* But, other (malicious) apps canclobber widget content
  - CWE-276 Incorrect Default Permissions
  - So we wrote a malicious app to do just that :)

** Case Study: Embedded Device #1
* Mix of HTTP/HTTPS external content
  - Strict SSL Validation
  - MITM'd HTTP traffic
  - injected HTML to enable hidden admin functionality

* Ultimate Pwn: CWE-78
  - Command Injection in Wireless SSID
  - Enable Telnetd, change root password
  - game over

** Case Study: Embedded Device #2
* Excellent input validation throughout the web app
  - except fo the command injection vulnerability in one parameter
  - enable telnetd
  - toor/<blank>
  - web server then runs as root
  - game over

** Brew picture upload
* brew application designed to backup data from the phone
* brew != smartphone
  - no wifi
* application directed SMS - Automation of applications via SMS
  - SMS Clients can parse messages, and identify specific control messages for distinct applications
  - Debug code: SMS to change target server
* configured the client to talk to our MITM on the internet
  - traffic was plaintext http/soap
  - auth requests
  - cookies, etc
  - weak hashes
* wrote python script to impersonate the client, for malicious client development
* post-mortem
  - no SSL
  - no real authentication
  - etc.

** RIM Picture Upload
REF: BBSAK - useful tool on blackberries
* hacked due to a caveat in older blackberries
  - Any chunk of SSL traffic over a certain size, could get severed
  - application used logic based on application data, got rerouted then hacked by making their own crypto routine
* XML injection flaws, etc.
* Lax permission set (wanted every permission)
* lack of input validation

*** Conclusion
* in mobile space, still nascent
* lack of guidance, standards, practices makes devs reinvent the wheel
* or just make them think they need to
* neglecting the security lessons learned with traditional and web applications
* client-side trust
* access control issues
* and all of the other "basic" problems and mistakes of yore.

OWASP Mobile Security Project
aims to provide resources for mobile app developers to build and deploy secure mobile apps
just like OWASP does for web applications
mailing list:
https://lists.owasp.org/mailman/subscribe/owasp-mobile-security-project

Q: Have you seen malicious apps out there that are trying to take over other apps?
A: We looked into an issue we found; on android there are ways to install applications without the user's permissions. Normally, the user gets notification. There are ways to sidestep this; averting alerting the user of knowing an app was installed. This happens via an authorization token that can just be pushed to the mobile. We did a test app that would then download three more applications (all fake, but just proof-of-concept). The whole point is that you can be tricked into downloading apps that you want (that look like the real app). Google pulled 25-30 fake banking apps some time ago that were phishing for user data; from the android market.

Q: Are there any good ways to store login credentials on a phone?
A: On iOS there's the KeyStore; I'm not an iOS dev, but there is a KeyStore where you may securely store credentials. There are also browser mechanisms. Android; shared preferences or use a private SQLite database. Also, they can just use session tokens; and not store this data on the device.

Q: Given what you've mentioned about malicious apps; is there any way to tell if you have suspicious activity going on your phone?
A: There's an app called "lookout" that has virus scanning and malware scanning abilities. There was a project by some intel (princeton?) researches called "taintDroid" that would be able to mark incoming data as tainted and determine where it would propagate onto the internet. Unfortunately there aren't any real ways to do this with COTS apps.